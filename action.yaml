name: "AccuKnox IaC Scanner"
description: "Run Scan against infrastructure as code using AccuKnox."

inputs:
  scan_image:
    description: "Docker image to use for the AccuKnox scanner."
    required: false
    default: "public.ecr.aws/k9v9d5v2/accuknox-aspm-scanner:v0.9.1"
  file:
    description: 'Specify a file for scanning; cannot be used with directory input. Filter runners by file type, e.g., ".tf" for Terraform.'
    required: false
    default: ""
  directory:
    description: "Directory with infrastructure code and/or package manager files to scan"
    required: false
    default: "."
  compact:
    description: "Do not display code blocks in output"
    required: false
    default: true
  quiet:
    description: "Display only failed checks"
    required: false
    default: true
  soft_fail:
    description: "Do not return an error code if there are failed checks"
    required: false
    default: true
  framework:
    description: "Run only on a specific infrastructure, Supported: Kubernetes & Terraform"
    required: false
    default: ""
  skip_framework:
    description: "Skip a specific infrastructure"
    required: false
    default: ""
  token:
    description: "The token for authenticating with the CSPM panel."
    required: true
  tenant_id:
    description: "The ID of the tenant associated with the CSPM panel."
    required: false
    default: ""
  endpoint:
    description: "The URL of the CSPM panel to push the scan results to."
    required: false
    default: "cspm.demo.accuknox.com"
  label:
    description: "The label created in AccuKnox SaaS for associating scan results."
    required: true

branding:
  icon: "shield"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: Run AccuKnox IaC Scan
      shell: bash
      run: |
        # Build command arguments dynamically
        CMD_ARGS=""

        if [[ -n "${{ inputs.file }}" ]]; then
          CMD_ARGS="$CMD_ARGS --file ${{ inputs.file }}"
        fi

        if [[ -n "${{ inputs.directory }}" ]]; then
          CMD_ARGS="$CMD_ARGS --directory ${{ inputs.directory }}"
        fi

        if [[ "${{ inputs.compact }}" == "true" ]]; then
          CMD_ARGS="$CMD_ARGS --compact"
        fi

        if [[ "${{ inputs.quiet }}" == "true" ]]; then
          CMD_ARGS="$CMD_ARGS --quiet"
        fi

        if [[ -n "${{ inputs.framework }}" ]]; then
          CMD_ARGS="$CMD_ARGS --framework ${{ inputs.framework }}"
        fi

        if [[ -n "${{ inputs.skip_framework }}" ]]; then
          CMD_ARGS="$CMD_ARGS --skip-framework ${{ inputs.skip_framework }}"
        fi

        SOFTFAIL_ARG=""
        if [[ "${{ inputs.soft_fail }}" == "true" ]]; then
          SOFTFAIL_ARG="--softfail"
        fi

        # Run the scanner
        echo "Running AccuKnox scanner with args: $CMD_ARGS"
        docker run --rm \
          -e ACCUKNOX_TOKEN="${{ inputs.token }}" \
          -e ACCUKNOX_ENDPOINT="${{ inputs.endpoint }}" \
          -e ACCUKNOX_LABEL="${{ inputs.label }}" \
          -v "${GITHUB_WORKSPACE}:/workspace" \
          ${{ inputs.scan_image }} \
          scan $SOFTFAIL_ARG iac --command "$CMD_ARGS" --container-mode
      continue-on-error: true
